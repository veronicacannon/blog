I"o<p>It can be challenging to know where to break a long line in ruby.  Especially when writing tests in rspec.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">PostHelper</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:helper</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'#markdown'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'returns code blocks'</span> <span class="k">do</span>
      <span class="n">blog_text</span> <span class="o">=</span> <span class="s2">"```ruby</span><span class="se">\n</span><span class="s2">Hello, World!</span><span class="se">\n</span><span class="s2">```"</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">helper</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="n">blog_text</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"&lt;pre&gt;&lt;code class=</span><span class="se">\"</span><span class="s2">ruby</span><span class="se">\"</span><span class="s2">&gt;Hello, World!</span><span class="se">\n</span><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>One technique is to find the method call, <code class="highlighter-rouge">.to</code> in the example above, and break it there.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">PostHelper</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:helper</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'#markdown'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'returns code blocks'</span> <span class="k">do</span>
      <span class="n">blog_text</span> <span class="o">=</span> <span class="s2">"```ruby</span><span class="se">\n</span><span class="s2">Hello, World!</span><span class="se">\n</span><span class="s2">```"</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">helper</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="n">blog_text</span><span class="p">)).</span>
        <span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"&lt;pre&gt;&lt;code class=</span><span class="se">\"</span><span class="s2">ruby</span><span class="se">\"</span><span class="s2">&gt;Hello, World!</span><span class="se">\n</span><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><a href="https://docs.rubocop.org/en/stable/">Rubocop</a> can help improve your ruby style.  Rubocop is available as an extension in Visual Studio code.</p>
:ET